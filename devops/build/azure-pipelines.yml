# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: TerraformInstaller@1
  displayName: Terraform installer
  inputs:
    terraformVersion: 'latest'
- task: terraformdownload@0
  displayName: 
  inputs:
    tfversion: '0.11.11'
- task: terraforminit@0
  displayName: Terraform init AKS
  inputs:
    cwd: './devops/iac/TerraformAKS/'
    useazurerm: true
    azureSubscription: 'sagar-svc-conn'
    initbackend: false
- task: terraforminit@0
  displayName: Terraform init ACR
  inputs:
    cwd: './devops/iac/terraformACR/'
    useazurerm: true
    azureSubscription: 'sagar-svc-conn'
    initbackend: false
- task: TerraformTaskV4@4
  displayName: terraform validate AKS
  inputs:
    provider: 'azurerm'
    command: 'validate'
    workingDirectory: './devops/iac/TerraformAKS/'
- task: TerraformTaskV4@4
  displayName: terraform validate ACR
  inputs:
    provider: 'azurerm'
    command: 'validate'
    workingDirectory: './devops/iac/terraformACR/'
- task: terraformplan@0
  displayName: terraform plan AKS
  inputs:
    cwd: '$(System.DefaultWorkingDirectory)/devops/iac/TerraformAKS'
    useazurerm: true
    connectedServiceNameARM: 'sagar-svc-conn'
    usevarsfile: false
    usevars: false
    savePlanResult: true
    planOutput: '$(System.DefaultWorkingDirectory)/devops/iac/TerraformAKS/tfplan'

- task: terraformplan@0
  displayName: terraform plan ACR
  inputs:
    cwd: '$(System.DefaultWorkingDirectory)/devops/iac/terraformACR'
    useazurerm: true
    connectedServiceNameARM: 'sagar-svc-conn'
    usevarsfile: false
    usevars: false
    savePlanResult: true
    planOutput: '$(System.DefaultWorkingDirectory)/devops/iac/terraformACR/tfplan'
- task: terraforminit@0
  displayName: Terraform init ACR
  inputs:
    cwd: './devops/iac/'
    useazurerm: true
    azureSubscription: 'sagar-svc-conn'
    initbackend: false
- script: |
    #!/bin/bash
    terraform show -json $(System.DefaultWorkingDirectory)/devops/iac/TerraformAKS/tfplan > $(System.DefaultWorkingDirectory)/devops/iac/aks_plan.json
    terraform show -json $(System.DefaultWorkingDirectory)/devops/iac/terraformACR/tfplan > $(System.DefaultWorkingDirectory)/devops/iac/acr_plan.json
    jq -s '.[0] * .[1]' $(System.DefaultWorkingDirectory)/devops/iac/aks_plan.json $(System.DefaultWorkingDirectory)/devops/iac/acr_plan.json > $(System.DefaultWorkingDirectory)/devops/iac/combined_plan.json
    terraform plan -out=$(System.DefaultWorkingDirectory)/devops/iac/tfplan -input=false -var-file=$(System.DefaultWorkingDirectory)/devops/iac/combined_plan.json
  displayName: Merge Terraform plans

- task: CopyFiles@2
  displayName: Copy .tf files
  inputs:
    sourceFolder: '$(System.DefaultWorkingDirectory)/devops/iac'
    contents: |
     **/*.tf
     tfplan
     **/tfplan
    targetFolder: '$(Build.ArtifactStagingDirectory)/tf-files'
- task: PublishPipelineArtifact@1
  displayName: Publish teraform .tf files
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/tf-files'
    artifact: 'utkarsh terraform pipeline'
    publishLocation: 'pipeline'
    